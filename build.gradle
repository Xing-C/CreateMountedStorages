buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven {
            url = 'https://maven.parchmentmc.org'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}


apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

mixin {
    add sourceSets.main, "moremountedstorages.refmap.json"
}

version = '1.3.0'
group = 'com.juh9870.moremountedstorages' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'moremountedstorages'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.17' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.08.07-1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            args "-mixin.config=moremountedstorages.mixins.json", "--username", "hminer"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                moremountedstorages {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args "-mixin.config=moremountedstorages.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                moremountedstorages {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'moremountedstorages', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                moremountedstorages {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://modmaven.dev/"
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
//    maven {
//        // Industrial Foregoing
//        url 'https://cdn.hrzn.studio/maven/'
//    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.60'

    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.18.2-1.1.3")

    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.18.2:${flywheel_version}")
    implementation fg.deobf("maven.modrinth:create:${create_version}")

    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:${chickenlib_version}")
    implementation fg.deobf("curse.maven:ender-storage-1-8-245174:${enderstorage_version}")

    implementation fg.deobf("curse.maven:iron-chests-228756:${ironchests_versioncode}")

    implementation fg.deobf("curse.maven:storage-drawers-223852:${storagedrawers_versioncode}")
    implementation fg.deobf("curse.maven:framed-compacting-drawers-376351:${framedcompactingdrawers_versioncode}")

//    implementation fg.deobf("curse.maven:functional-storage-556861:${functionalstorage_versioncode}")

    implementation fg.deobf("curse.maven:immersive-engineering-231951:${immersiveengineering_versioncode}")

    implementation fg.deobf("com.hrznstudio:titanium:${titanium_version}")
    implementation fg.deobf("com.buuz135:industrial-foregoing:${IF_version}")

    implementation fg.deobf("curse.maven:patchouli-306770:${patchouli_version}")
    implementation fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:${pneumaticcraft_version}")

    //implementation fg.deobf("curse.maven:ninjaphenixs-container-library_versioncode-530668:${ninjaphenixs_container_library_versioncode}")
//    implementation fg.deobf("/libs/*.jar")
//
//    implementation fg.deobf("curse.maven:expanded-storage-forge-362415:${expandedstorage_versioncode}")


    implementation fg.deobf("curse.maven:supermartijn642s-core-lib-454372:${supermartijn642score_versioncode}")
    implementation fg.deobf("curse.maven:trash-cans-394535:${trashcans_versioncode}")
    implementation fg.deobf("curse.maven:shetiphiancore-71738:${shetiphiancore_versioncode}")
    implementation fg.deobf("curse.maven:enderchests-363535:${enderchests_versioncode}")

    implementation fg.deobf("curse.maven:dimstorage-353882:${dimstorage_versioncode}")

    // implementation fg.deobf("curse.maven:storage_overhaul-382599:${storage_overhaul_versioncode}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "moremountedstorages",
                "Specification-Vendor"    : "mrh0",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "mrh0",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "moremountedstorages.mixins.json"
        ])
    }
}

// jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
